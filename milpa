#!/usr/bin/env bash
# Copyright Â© 2021 Roberto Hidalgo <milpa@un.rob.mx.>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# MILPA ROOT points to this installation of the milpa kernel
# lol, kernel. La gente bilingue seguro entiende el chiste.
export MILPA_ROOT=${MILPA_ROOT:-/usr/local/lib/milpa}
if [[ ! -d "$MILPA_ROOT" ]]; then
  >&2 echo "MILPA_ROOT is not a directory!: $MILPA_ROOT"
  exit 78
fi
# MILPA_PATH contains all known milpa repositories
# Repositories are folders that contain a .milpa directory within
# set to MILPA_ROOT if empty, otherwise prepend $MILPA_ROOT:
MILPA_PATH="${MILPA_PATH+$MILPA_ROOT:}${MILPA_PATH:-$MILPA_ROOT}"
# if the current working dir contains a .milpa folder, add that to the path as well
_pwd="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
[[ -d "$_pwd/.milpa" ]] && [[ ! "$MILPA_PATH" =~ :?$_pwd:? ]] && MILPA_PATH="$MILPA_PATH:$_pwd"
export MILPA_PATH
# bash is fine and all, but we need a little helper to run parsing for us
export MILPA_COMPA="${MILPA_COMPA:-$MILPA_ROOT/compa}"

# bail early if we're autocompleting
[[ $1 == "__complete" ]] && exec "$MILPA_COMPA" "$@"

# create an array from this MILPA_PATH
IFS=: read -ra MILPA_PATH_ARR <<<"$MILPA_PATH"
export MILPA_PATH_ARR

function load_milpa_util () {
  # shell scripts can call load_milpa_util to load utils within the $MILPA_PATH
  # TODO: maybe bump $MILPA_COMMAND_REPO up in the path?
  local env_name
  for util_name in "$@"; do
    env_name="_MILPA_UTIL_${util_name//-/_}"
    if [[ "${!env_name}" == "1" ]]; then
      # util already loaded
      continue
    fi

    for pkg in $MILPA_PATH_ARR ; do
      util_path="${pkg}/.milpa/util/$util_name.sh"
      if [[ -f "$util_path" ]]; then
        set -o allexport
        # shellcheck disable=1090
        source "$util_path"
        set +o allexport
        export "${env_name?}=1"
        break
      fi
    done

    if [[ "${!env_name}" != "1" ]]; then
      # util not found
      >&2 echo "Missing util named $util_name"
      exit 78
    fi
  done
}

load_milpa_util log
function _fail () {
  _log error "$*"
  exit 2
}

compaOut=$(mktemp -t "compaOut.XXX")
compaErr=$(mktemp -t "compaErr.XXX")
trap 'rm -rf $compaOut $compaErr' ERR EXIT TERM

"$MILPA_COMPA" "$@" >"$compaOut" 2>"$compaErr" || {
  exitCode=$?

  if [[ "$exitCode" == 42 ]]; then
    # help requested
    cat "$compaOut"
    rm -rf "$compaOut" "$compaErr"
    exit
  fi

  error_message=""
  while read -r line; do
    if [[ "$line" = "Error: "* ]]; then
      error_message+="${line/Error: /}"
      continue
    fi
    >&2 echo "$line"
  done < <(cat "$compaErr" "$compaOut")
  rm -rf "$compaOut" "$compaErr"


  [[ "$error_message" != "" ]] && _log error "$error_message"
  exit $exitCode
}

# load parsed arguments and MILPA_ environment variables
eval "$(cat "$compaOut")" || _fail "Failed setting command environment"

[[ "${MILPA_VERBOSE:-$MILPA_OPT_VERBOSE}" == "true" ]] && export MILPA_VERBOSE="true"
[[ "$MILPA_DEBUG" == 1 ]] && _log debug "milpa-helper output: $(cat "$compaErr")"
_log debug "running <$MILPA_COMMAND_NAME from> <$MILPA_COMMAND_PATH> with arguments <${*}>"
_log debug "milpa environment:"$'\n'"$(env | grep ^MILPA | sort)"

rm -rf "$compaOut" "$compaErr"

if [[ -f "$MILPA_COMMAND_REPO/.milpa/hooks/before-run.sh" ]]; then
  set -o allexport
  # shellcheck disable=1091 source=/dev/null
  source "$MILPA_COMMAND_REPO/.milpa/hooks/before-run.sh"
  set +o allexport
fi

case "$MILPA_COMMAND_KIND" in
  exec)
    exec "$MILPA_COMMAND_PATH" "$@" ;;
  source)
    # shellcheck disable=1090
    source "$MILPA_COMMAND_PATH";;
  *)
    _log warning "Unsure how to run $MILPA_COMMAND_NAME. Found $MILPA_COMMAND_PATH, but it is neither a .sh file nor executable"
    _fail "Unable to continue running sub-command."
esac
