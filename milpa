#!/usr/bin/env bash
# Copyright Â© 2021 Roberto Hidalgo <milpa@un.rob.mx>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# MILPA ROOT points to this installation of the milpa kernel
# lol, kernel. La gente bilingue seguro entiende el chiste.
export MILPA_ROOT=${MILPA_ROOT:-/usr/local/lib/milpa}
if [[ ! -d "$MILPA_ROOT" ]]; then
  >&2 echo "MILPA_ROOT is not a directory!: $MILPA_ROOT"
  exit 78
fi

if [[ ! -d "$MILPA_ROOT/.milpa" ]]; then
  >&2 echo "MILPA_ROOT is not setup properly: missing .milpa folder: $MILPA_ROOT"
  exit 78
fi

# bash is fine and all, but we need a little helper to run parsing for us
export MILPA_COMPA="${MILPA_COMPA:-$MILPA_ROOT/compa}"
# bail early if we're autocompleting
[[ $1 == "__complete"* ]] && exec "$MILPA_COMPA" "$@"

function @milpa.load_util () {
  # shell scripts can call @milpa.load_util to load utils from MILPA_ROOT
  # or the current MILPA_COMMAND_REPO
  local env_name
  for util_name in "$@"; do
    env_name="_MILPA_UTIL_${util_name//-/_}"
    if [[ "${!env_name}" == "1" ]]; then
      # util already loaded
      continue
    fi

    libpath=( "$MILPA_ROOT/.milpa" )
    if [[ "$MILPA_COMMAND_REPO" != "" ]]; then
      libpath+=( "$MILPA_COMMAND_REPO" )
    fi

    for pkg in "${libpath[@]}" ; do
      util_path="${pkg}/util/$util_name.sh"
      if [[ -f "$util_path" ]]; then
        set -o allexport
        # shellcheck disable=1090
        source "$util_path"
        set +o allexport
        export "${env_name?}=1"
        break
      fi
    done

    if [[ "${!env_name}" != "1" ]]; then
      # util not found
      >&2 echo "Missing util named $util_name in ${libpath[*]}"
      exit 70 # programmer error
    fi
  done
}

@milpa.load_util log
function @milpa.fail () {
  # print an error, then exit
  @milpa.log error "$*"
  exit 2
}

# create some files pipes for compa
compaOut=$(mktemp -t "compaOut.XXX")
compaErr=$(mktemp -t "compaErr.XXX")
trap 'rm -rf $compaOut $compaErr' ERR EXIT TERM

# figure out what the user is asking for
COMPA_OUT="$compaOut" "$MILPA_COMPA" "$@" 2>"$compaErr" || {
  exitCode=$?

  # provide answers to life, the universe and everything
  if [[ "$exitCode" == 42 ]]; then
    # render help
    less -FIRX < "$compaErr"
    rm -rf "$compaOut" "$compaErr"
    # compa exits with 42 when the user asked for help explicitly
    # but asking for help shouldn't be an error, so we exit cleanly
    exit
  fi

  # otherwise, something else happened
  cat "$compaOut"
  cat "$compaErr"
  rm -rf "$compaOut" "$compaErr"
  exit $exitCode
}

# load parsed arguments and MILPA_ environment variables
set -o allexport
# shellcheck disable=1090
source "$compaOut" || @milpa.fail "Failed setting command environment"
set +o allexport
[[ -z "$MILPA_COMMAND_KIND" ]] && {
  @milpa.log info "lookup stderr: $(cat "$compaErr")"
  @milpa.log info "lookup stdout: $(cat "$compaOut")"
  @milpa.log info "milpa environment:"
  env | grep -e ^MILPA -e "^\(NO_\)\?COLOR=" | sort | @milpa.log info
  @milpa.fail "Command lookup succeeded, but command environment is incomplete"
}

@milpa.load_util milpa-version
_milpa_check_for_updates_automagically
# don't check again on recursive milpa calls from this point forward
export MILPA_DISABLE_UPDATE_CHECKS=1

# normalize verbose flag
[[ "${MILPA_VERBOSE:-$MILPA_OPT_VERBOSE}" == "true" ]] && export MILPA_VERBOSE="true"
# print debugging output if requested
if [[ "$DEBUG" ]]; then
  @milpa.log debug "$(cat "$compaErr")"
  @milpa.log debug "running <$MILPA_COMMAND_NAME> from <$MILPA_COMMAND_PATH> with arguments <${*}>"
  @milpa.log debug "milpa environment:"$'\n'"$(env | grep -e ^MILPA -e "^\(NO_\)\?COLOR=" | sort)"
fi

# thanks compa, good bye
rm -rf "$compaOut" "$compaErr"

# Run hooks if available
_bh="$MILPA_COMMAND_REPO/hooks/before-run.sh"
if [[ -f "$_bh" ]]; then
  @milpa.log debug "Running before-run hook"
  set -o allexport
  # shellcheck disable=1091 source=/dev/null
  source "$_bh" || @milpa.fail "could not run before-hook at $_bh"
  set +o allexport
  set +o errexit
  @milpa.log debug "Ran before-run hook"
fi

# Run the subcommand
case "$MILPA_COMMAND_KIND" in
  exec)
    exec "$MILPA_COMMAND_PATH" "$@" ;;
  source)
    # shellcheck disable=1090
    source "$MILPA_COMMAND_PATH";;
  *)
    @milpa.fail "Unable to continue running subcommand, unexpected kind <${MILPA_COMMAND_KIND}>."
esac
