<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>milpa 🌽</title>
    <link>https://milpa.dev/</link>
    <description>Recent content on milpa 🌽</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://milpa.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started</title>
      <link>https://milpa.dev/help/docs/milpa/quick-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/quick-guide/</guid>
      <description>Getting started with milpa is a matter of following these steps:
Installing it, installing milpa&amp;rsquo;s autocomplete script to your shell, possibly restarting your session, creating a new command, and editing it&amp;rsquo;s spec running the command to test it out You&amp;rsquo;ll be creating some files during this guide, so make sure to create a folder wherever you like. Feel free to use an existing project folder if you already have a script for it in mind!</description>
    </item>
    
    <item>
      <title>Why use milpa?</title>
      <link>https://milpa.dev/help/docs/milpa/use-case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/use-case/</guid>
      <description>I built milpa with a few use cases in mind:
To share groups of scripts used by a group of folks in an engineering team (i.e. setup development environments, work with secrets/credentials) to share context and code, without having to ask folks to run stuff off READMEs (i.e. pull service logs, forward ports), and to quickly build scripts that will be documented sufficiently well for my forgetful future-self. My goal with milpa is to make following the Command Line Interface Guidelines require as little effort as possible.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/environment/</guid>
      <description>There&amp;rsquo;s a few environment variables that control the behavior of milpa.
Paths # MILPA_ROOT # MILPA_ROOT points to the installed milpa kernel, by default /usr/local/lib/milpa. This folder contains a milpa repo, the milpa executable, and a helper binary named compa, along a copy of the license and the source repo&amp;rsquo;s README.
You can set it to a local installation, like a fork, and run $MILPA_ROOT/milpa to use that fork&amp;rsquo;s scripts instead of an installed version.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/internals/</guid>
      <description>milpa is a bash script in charge of setting environment variables and handing off to the user-requested script. Most of the heavy lifting, including argument/option parsing and validation, as well as finding commands, is done by a companion binary named compa (a slang term for friend in spanish).
milpa is built with, and thanks to:
bash spf13/cobra How it works # milpa sets the stage # As it starts running, milpa will set MILPA_ROOT, exit unless it points to an existing directory, We&amp;rsquo;ll bail after setting the global environment if the user requested a completion (with the hidden __complete command).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/changelog/</guid>
      <description>Milpa follows the semver 2.0.0 specification.
Upcoming # 🌱 Features # (dfa152) Argument and flag run-time validation, so your command can focus on using them. (dfa152) Command line argument, flag autocomplete for your commands on bash, zsh and fish. Completions can come from other commands. (dfa152) Don&amp;rsquo;t wanna write stuff over and over again? milpa itself repo install will come in handy to install remote milpa repos. (dfa152) Drop your commands and specs in your project&amp;rsquo;s .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/command/spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/command/spec/</guid>
      <description>Command specs go along with your scripts and help inform milpa of what its input should look like. Based on it, milpa will produce help pages and word completions, and may validate the arguments to your command.
Specs must be written in YAML, have a yaml extension, and be named exactly like your command (minus the extension, if any). For example, given a command at .milpa/commands/my-command.sh the corresponding spec file would be .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/repo/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/repo/docs/</guid>
      <description>milpa can render any markdown-formatted documents stored at .milpa/docs to the terminal and browser. Files must be named with an / extension and may exist at any folder depth. Files named .milpa/docs/whatever/ may be displayed by running either milpa help docs whatever or milpa help docs whatever index
Same docs are rendered to HTML, using the milpa itself docs html command.
These docs are brought to you courtesy of the Recursive Department of Departamental Recursiveness.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/repo/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/repo/hooks/</guid>
      <description>milpa provides a couple of hook points for you to tweak the behavior of your shell and your repo&amp;rsquo;s commands. Hooks for your repo must be placed in the .milpa/hooks folder.
shell-init(.sh) # This hook is run whenever milpa itself shell init is called. Its purpose is to set any environment variables specific to your repo during every shell&amp;rsquo;s initialization process. This hook can be either a bash shell script with an .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/util/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/util/log/</guid>
      <description>The log util contains shell functions related to output of informational messages. This utility is loaded by default.
If TERM is not set, then it&amp;rsquo;ll default to xterm-color.
Functions # @milpa.fmt # @milpa.fmt CODE MESSAGE
Returns MESSAGE formatted with CODE and does not print a new line. Code can be any of bold, warning, error and inverted.
@milpa.log # @milpa.log LEVEL [MESSAGE]
Prints MESSAGE with a log prefix, unless --silent is specified or LEVEL is error.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/util/repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/util/repo/</guid>
      <description>The repo util contains shell functions related to milpa repositories
Functions # @milpa.repo.current_path # @milpa.repo.current_path
Returns the nearest .milpa repo from the current working directory where milpa was invoked from. It returns 2 if it reaches the / directory without finding a .milpa folder in its path.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/util/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/util/shell/</guid>
      <description>The repo util contains shell functions useful during shell-init hook scripts, where it&amp;rsquo;s loaded by default.
These functions are compatible with shells whose name ends in &amp;ldquo;sh&amp;rdquo; and are POSIX-compliant, and the fish shell.
Functions # @milpa.shell.export # @milpa.shell.export NAME VALUE
Prints a command, that when evaluated by a user&amp;rsquo;s shell, will set an environment variable on the current process, much like POSIX&amp;rsquo;s export builtin.
@milpa.shell.append_path # @milpa.shell.export DIRECTORY [VARIABLE]</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/help/docs/milpa/util/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/util/tmp/</guid>
      <description>The fmt util contains shell functions related to the creation and cleanup of temporary files and directories.
Functions # @tmp.file # @tmp.file HANDLE
Creates a temporary file (in /tmp with HANDLE as prefix) and exports a new variable named HANDLE with the path to this new file. HANDLE should therefore be a valid variable name identifier.
#!/usr/bin/env bash @milpa.load_util tmp # create the file @tmp.file my_tmp_file echo &amp;#34;some data&amp;#34; &amp;gt;&amp;#34;$my_tmp_file&amp;#34; @tmp.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/command-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/command-tree/</guid>
      <description>Prints a tree of known commands
Usage # milpa itself command-tree [options] [PREFIX...]
Description # Prints out command names and descriptions, or optionally all properties as json or yaml.
Examples # # print all known subcommands milpa itself command-tree # print a tree of milpa itself sub-commands milpa itself command-tree itself # print out all commands, skipping groups milpa itself command-tree --template &amp;#39;{{ if (not (eq .Meta.Kind &amp;#34;virtual&amp;#34;)) }}{{ .FullName }}&amp;#39;$&amp;#39;\n&amp;#39;&amp;#39;{{ end }}&amp;#39; # get all commands as a json tree milpa itself command-tree --output json # same, but as the yaml representation of this command itself milpa itself command-tree --output json itself command-tree Arguments # PREFIX.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/create/</guid>
      <description>Create a milpa command
Usage # milpa itself create [options] NAME...
Description # Creates a local milpa command named $NAME.
Arguments # NAME... required - the name you&amp;rsquo;d like for your command Options # --description (string): a longer description of how this command works. Default: Works by doing a thing with another thing until the first thing looks about right. --executable (bool): Create an empty, executable command. Useful when you&amp;rsquo;d like using something other than bash.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/docs/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/docs/create/</guid>
      <description>Creates a new doc in your milpa
Usage # milpa itself docs create [options] NAME...
Description # See milpa help docs for more info on docs.
Arguments # NAME... required - the name you&amp;rsquo;d like for your doc Options # --open (bool): Open the script file in your current $EDITOR after creation. --repo (string): a path to the milpa repo to create this doc in. By default, the nearest .milpa directory from pwd and up.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/docs/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/docs/html/</guid>
      <description>Renders or displays HTML documentation for all commands
Usage # milpa itself docs html [options] [ACTION]
Description # Renders documentation for all known milpa commands, and all docs folders. Requires docker to be installed and running. To learn more about milpa docs, check out milpa help docs milpa repo docs.
By default, documentation will be served from http://localhost:8118 and if a browser is configured to open websites from the terminal, it&amp;rsquo;ll open at that address.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/doctor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/doctor/</guid>
      <description>Validates all commands found on the MILPA_PATH
Usage # milpa itself doctor [options]
Description # This command will run checks on all known commands, parsing specs and validating their values.
Options # --summary (bool): Only print errors, if any. Global Options # --color (bool): Always print colors to stderr. Default: true. --help (bool): Display help for any command. --no-color (bool): Disable printing of colors to stderr. --silent (bool): Silence non-error logging.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/repo/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/repo/install/</guid>
      <description>Installs a milpa repo
Usage # milpa itself repo install [options] SOURCE [TARGET]
Description # Fetches a milpa repo and installs it to any of three locations:
The path specified by the TARGET argument, if provided, In the $MILPA_ROOT (by default, /usr/local/lib/milpa), if --global is specified, or In $XDG_DATA_HOME/milpa folder, if --user is specified. Repos will be fetched from the .milpa subdirectory of SOURCE, which must be an URL as specified by go-getter.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/repo/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/repo/list/</guid>
      <description>Lists installed repos
Usage # milpa itself repo list [options]
Description # Milpa can install repositories from remote locations at two different locations, depending on how it was instaled.
In the $MILPA_ROOT (by default, /usr/local/lib/milpa) In $XDG_DATA_HOME/milpa folder For more information on installing packages, see milpa itself repo install --help
Options # --paths-only (bool): Only output the paths to repos with no decoration. Global Options # --color (bool): Always print colors to stderr.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/repo/uninstall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/repo/uninstall/</guid>
      <description>Removes an installed milpa repo
Usage # milpa itself repo uninstall [options] PATH
Description # Uninstalls a milpa repo by PATH. See milpa itself repo list --help for a list of available repos
Arguments # PATH required - The repo path to uninstall Global Options # --color (bool): Always print colors to stderr. Default: true. --help (bool): Display help for any command. --no-color (bool): Disable printing of colors to stderr. --silent (bool): Silence non-error logging.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/shell/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/shell/init/</guid>
      <description>Initializes shells
Usage # milpa itself shell init [options]
Description # Running milpa itself shell init will look for shell scripts named .milpa/hooks/shell-init.sh/executables named .milpa/hooks/shell-init and source them.
These shell-init scripts should print shell-specific instructions that a user may eval during the initialization of a new shell prompt. The @milpa.shell bash functions will be available for script shells to facilitate printing export statements compatible with POSIX-compliant shells and fish.
Using with bash, zsh, etc: # On POSIX-compliant shells (zsh or bash, for example), you may add this to near the very end of shell profile (usually at ~/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/shell/install-autocomplete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/shell/install-autocomplete/</guid>
      <description>Generates shell completion scripts
Usage # milpa itself shell install-autocomplete [options]
Description # Generates a shell completion script for the current $SHELL. It currently supports bash, fish and zsh. It will write a (_)milpa file in your shell&amp;rsquo;s completion function folder:
for bash, either /etc/bash_completion.d or /usr/local/etc/bash_completion.d for zsh, whatever is first in $fpath, for example: /usr/local/share/zsh/site-functions for fish, $HOME/.config/fish/completions/ You&amp;rsquo;ll need to reload your shell (for example, by restarting your terminal), and make sure your shell&amp;rsquo;s completion system is enabled!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/upgrade/</guid>
      <description>Upgrades milpa to the latest available version
Usage # milpa itself upgrade [options]
Description # If a new version is available, this command will download and install it.
Global Options # --color (bool): Always print colors to stderr. Default: true. --help (bool): Display help for any command. --no-color (bool): Disable printing of colors to stderr. --silent (bool): Silence non-error logging. --skip-validation (bool): Do not validate any arguments or options. --verbose (bool): Log verbose output to stderr.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/itself/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/itself/version/</guid>
      <description>Displays the version of milpa
Usage # milpa itself version [options]
Description # Outputs the version of milpa to stdout, printing a new line if the output is a TTY. Also available as milpa --version
Global Options # --color (bool): Always print colors to stderr. Default: true. --help (bool): Display help for any command. --no-color (bool): Disable printing of colors to stderr. --silent (bool): Silence non-error logging. --skip-validation (bool): Do not validate any arguments or options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://milpa.dev/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/version/</guid>
      <description>Display program version
Usage # milpa version
Description # milpa is a command-line tool to care for one&amp;rsquo;s own garden of scripts, its name comes from an agricultural method that combines multiple crops in close proximity. You and your team write scripts and a little spec for each command -use bash, or any other language-, and milpa provides autocomplete, sub-commands, argument parsing and validation so you can skip the toil and focus on your scripts.</description>
    </item>
    
    <item>
      <title>Getting help with milpa</title>
      <link>https://milpa.dev/help/docs/milpa/support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://milpa.dev/help/docs/milpa/support/</guid>
      <description>milpa is currently alpha software. This means that while I&amp;rsquo;ve personally tested it for over a year:
test coverage is pretty lacking, the command spec and script environment is subject to change, and there&amp;rsquo;s no guarantee of stability of any internal command or utility ℹ️ Requesting help # Please open a support request on github, and I&amp;rsquo;ll do my best to help.
🐛 Reporting bugs # If you find any bugs, please open a bug report so I can take a look and we can fix it together.</description>
    </item>
    
  </channel>
</rss>
